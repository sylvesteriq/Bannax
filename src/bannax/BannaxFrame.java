/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bannax;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
/**
 *
 * @author njoks
 */
public class BannaxFrame extends javax.swing.JFrame {

    /**
     * Creates new form BannaxFrame
     */
    public BannaxFrame() {
        nimbusLook();
        initComponents();
        initEvents();
       mdl = (DefaultTableModel) table2.getModel();
       mdl2 = (DefaultTableModel) table3.getModel();
       try{
           Date e;
           Calendar cal = Calendar.getInstance();
           d = new Date(cal.get(Calendar.YEAR)-1900,cal.get(Calendar.MONTH),cal.get(Calendar.DATE));
           connection = DriverManager.getConnection("jdbc:derby:BannaDatabase");
           PreparedStatement y = connection.prepareStatement("UPDATE DATE SET TIME = (?)");
           Statement s = connection.createStatement();
           ResultSet r = s.executeQuery("SELECT * FROM DATE");
           
           
           r.next();
              
           e = r.getDate(1);
           
           if((d.compareTo(e)<0)||(d.getMonth()-e.getMonth())>2){
              
                  JOptionPane.showMessageDialog(this, "Inaccurate Date and Time");
            
                  System.exit(0);
             
             }
           if(d.compareTo(e)!= 0){           
           y.setDate(1, d);
           y.executeUpdate();
           }
           r = s.executeQuery("SELECT * FROM DATE2");
           r.next();
           //Date gh  = Date.valueOf("2030-9-7");
           Date d2 = r.getDate(1);
           if(!d2.equals(d)){
               
               s.executeUpdate("DELETE FROM SUMMARY");
               PreparedStatement u = connection.prepareStatement("UPDATE DATE2 SET SELLDATE = (?)");
               u.setDate(1, d);
               u.executeUpdate();
               
           }
           
           
           updateNotification("Connection to Database Successful");
           
       }
       catch(SQLException s){
           updateNotification("Failed To Connect To Database");
           s.printStackTrace();
          // JOptionPane.showMessageDialog(this, "Database File Missing or Application is Already Open");
          // System.exit(0);
       }
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginDialog = new javax.swing.JDialog();
        headerLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        addItemDialog = new javax.swing.JDialog();
        itemNameLabel = new javax.swing.JLabel();
        expiryMonthLabel = new javax.swing.JLabel();
        itemNameField = new javax.swing.JTextField();
        expiryMonthField = new javax.swing.JTextField();
        expiryYearLabel = new javax.swing.JLabel();
        expiryYearField = new javax.swing.JTextField();
        stockNumberLabel = new javax.swing.JLabel();
        packetNumberField = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        packetPriceField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        cancelButton2 = new javax.swing.JButton();
        addItemLabel = new javax.swing.JLabel();
        stockNumberLabel1 = new javax.swing.JLabel();
        cardPerPacketField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cardPriceField = new javax.swing.JTextField();
        editTableDialog = new javax.swing.JDialog();
        frameScrollPane1 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        submitButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        upDateButton = new javax.swing.JButton();
        rowPlusButton = new javax.swing.JButton();
        rowMinusButton = new javax.swing.JButton();
        editLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        tableModelDialog = new javax.swing.JDialog();
        frameScrollPane2 = new javax.swing.JScrollPane();
        table3 = new javax.swing.JTable();
        warningDialog = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        salesDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();
        totalLabel = new javax.swing.JLabel();
        totalBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        totalMinusDiscount = new javax.swing.JLabel();
        sellBtn = new javax.swing.JButton();
        cancelSaleBtn = new javax.swing.JButton();
        discountField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        newStockDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        newStockTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        frameToolBar = new javax.swing.JToolBar();
        toolBarAddBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        toolBarsearchBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        refreshBtn = new javax.swing.JButton();
        frameScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        editControlsLabel = new javax.swing.JPanel();
        editBtn2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        refreshBtn2 = new javax.swing.JButton();
        AddBtn2 = new javax.swing.JButton();
        notifyLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        salesAddBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        newStockBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        summaryTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nOSLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        nODLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cAH = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        descField = new javax.swing.JTextField();
        amountField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        frameMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        loginDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        loginDialog.setTitle("Login");
        loginDialog.setMinimumSize(new java.awt.Dimension(489, 182));

        headerLabel.setBackground(new java.awt.Color(255, 255, 102));
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("Enter Password To Edit Table");
        headerLabel.setOpaque(true);

        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordLabel.setText("Password:");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginDialogLayout = new javax.swing.GroupLayout(loginDialog.getContentPane());
        loginDialog.getContentPane().setLayout(loginDialogLayout);
        loginDialogLayout.setHorizontalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122))
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(loginDialogLayout.createSequentialGroup()
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginDialogLayout.createSequentialGroup()
                        .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loginDialogLayout.setVerticalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        addItemDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addItemDialog.setTitle("Add Dialog");
        addItemDialog.setMinimumSize(new java.awt.Dimension(600, 300));
        addItemDialog.setModal(true);
        addItemDialog.setResizable(false);

        itemNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        itemNameLabel.setText("Item Name:");

        expiryMonthLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        expiryMonthLabel.setText("Enter Expiry Month:");

        expiryYearLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        expiryYearLabel.setText("Enter Expiry Year:");

        stockNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        stockNumberLabel.setText("No. Of Packets:");

        packetNumberField.setToolTipText("Enter Number of Packets");

        priceLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        priceLabel.setText("Packet Price(N):");

        packetPriceField.setColumns(10);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        cancelButton2.setText("Cancel");
        cancelButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton2ActionPerformed(evt);
            }
        });

        addItemLabel.setBackground(new java.awt.Color(0, 0, 0));
        addItemLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addItemLabel.setForeground(new java.awt.Color(102, 255, 255));
        addItemLabel.setOpaque(true);

        stockNumberLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        stockNumberLabel1.setText("Cards Per Packet:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Card Price(N):");

        javax.swing.GroupLayout addItemDialogLayout = new javax.swing.GroupLayout(addItemDialog.getContentPane());
        addItemDialog.getContentPane().setLayout(addItemDialogLayout);
        addItemDialogLayout.setHorizontalGroup(
            addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addItemDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addItemDialogLayout.createSequentialGroup()
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addItemDialogLayout.createSequentialGroup()
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(expiryMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(itemNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addItemDialogLayout.createSequentialGroup()
                                .addComponent(expiryMonthField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(expiryYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(expiryYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addItemDialogLayout.createSequentialGroup()
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(addItemDialogLayout.createSequentialGroup()
                                .addComponent(stockNumberLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cardPerPacketField))
                            .addGroup(addItemDialogLayout.createSequentialGroup()
                                .addComponent(stockNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(packetNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(packetPriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(cardPriceField))))
                .addGap(91, 91, 91))
            .addGroup(addItemDialogLayout.createSequentialGroup()
                .addComponent(addItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addItemDialogLayout.setVerticalGroup(
            addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemDialogLayout.createSequentialGroup()
                .addComponent(addItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expiryMonthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expiryMonthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expiryYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expiryYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packetNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packetPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockNumberLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardPerPacketField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        editTableDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        editTableDialog.setTitle("Entry Edit Dialog");
        editTableDialog.setMinimumSize(new java.awt.Dimension(900, 455));
        editTableDialog.setResizable(false);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "No. In Stock(packets)", "No. In Stock(cards)", "Packet Price", "Card Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table2.getTableHeader().setReorderingAllowed(false);
        frameScrollPane1.setViewportView(table2);
        table2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        submitButton.setText("Submit New Entries");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh List");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        upDateButton.setBackground(new java.awt.Color(51, 255, 102));
        upDateButton.setText("Update");
        upDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upDateButtonActionPerformed(evt);
            }
        });

        rowPlusButton.setText("Row +");
        rowPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowPlusButtonActionPerformed(evt);
            }
        });

        rowMinusButton.setText("Row -");
        rowMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowMinusButtonActionPerformed(evt);
            }
        });

        editLabel.setBackground(new java.awt.Color(153, 153, 153));
        editLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        editLabel.setForeground(new java.awt.Color(255, 0, 0));
        editLabel.setOpaque(true);

        deleteButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteButton.setText("Delete Selected");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editTableDialogLayout = new javax.swing.GroupLayout(editTableDialog.getContentPane());
        editTableDialog.getContentPane().setLayout(editTableDialogLayout);
        editTableDialogLayout.setHorizontalGroup(
            editTableDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTableDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(frameScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(editTableDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editTableDialogLayout.createSequentialGroup()
                        .addComponent(rowPlusButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rowMinusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(upDateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(52, 52, 52))
            .addGroup(editTableDialogLayout.createSequentialGroup()
                .addComponent(editLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        editTableDialogLayout.setVerticalGroup(
            editTableDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editTableDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editTableDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(editTableDialogLayout.createSequentialGroup()
                        .addComponent(upDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editTableDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rowPlusButton)
                            .addComponent(rowMinusButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(frameScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(editLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "No. In Stock(packets)", "CardsPerPacket", "Expiry Date", "Packet Price", "Card Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table3.getTableHeader().setReorderingAllowed(false);
        frameScrollPane2.setViewportView(table3);
        table3.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout tableModelDialogLayout = new javax.swing.GroupLayout(tableModelDialog.getContentPane());
        tableModelDialog.getContentPane().setLayout(tableModelDialogLayout);
        tableModelDialogLayout.setHorizontalGroup(
            tableModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
            .addGroup(tableModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tableModelDialogLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(frameScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        tableModelDialogLayout.setVerticalGroup(
            tableModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 351, Short.MAX_VALUE)
            .addGroup(tableModelDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tableModelDialogLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(frameScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        warningDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        warningDialog.setTitle("WARNING");
        warningDialog.setMinimumSize(new java.awt.Dimension(380, 200));
        warningDialog.setModal(true);
        warningDialog.setPreferredSize(new java.awt.Dimension(380, 200));
        warningDialog.setResizable(false);

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Yes Delete!!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(51, 255, 51));
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/warningYellow.gif"))); // NOI18N
        jLabel3.setText("DO YOU REALLY WANT TO DELETE SELECTED ITEMS??");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("This Cannot Be Undone");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout warningDialogLayout = new javax.swing.GroupLayout(warningDialog.getContentPane());
        warningDialog.getContentPane().setLayout(warningDialogLayout);
        warningDialogLayout.setHorizontalGroup(
            warningDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(warningDialogLayout.createSequentialGroup()
                .addGroup(warningDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(warningDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(warningDialogLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jButton1)
                        .addGap(32, 32, 32)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(warningDialogLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        warningDialogLayout.setVerticalGroup(
            warningDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warningDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(warningDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        warningDialog.getAccessibleContext().setAccessibleParent(null);

        salesDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        salesDialog.setTitle("Sales Dialog");
        salesDialog.setAlwaysOnTop(true);
        salesDialog.setMinimumSize(new java.awt.Dimension(600, 500));
        salesDialog.setResizable(false);

        salesTable.setBackground(new java.awt.Color(153, 255, 0));
        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Packet Number", "Card Number", "Price(₦)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(salesTable);

        totalLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLabel.setText("0.00");

        totalBtn.setBackground(new java.awt.Color(0, 204, 204));
        totalBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalBtn.setText("Total(₦):");
        totalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Minus Discount(₦):");

        totalMinusDiscount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalMinusDiscount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalMinusDiscount.setText("0.00");

        sellBtn.setBackground(new java.awt.Color(51, 255, 51));
        sellBtn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sellBtn.setText("Sell");
        sellBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellBtnActionPerformed(evt);
            }
        });

        cancelSaleBtn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cancelSaleBtn.setText("Cancel");
        cancelSaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSaleBtnActionPerformed(evt);
            }
        });

        discountField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        discountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        discountField.setToolTipText("Enter Discount Amount");
        discountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountFieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Discount(₦):");

        javax.swing.GroupLayout salesDialogLayout = new javax.swing.GroupLayout(salesDialog.getContentPane());
        salesDialog.getContentPane().setLayout(salesDialogLayout);
        salesDialogLayout.setHorizontalGroup(
            salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(salesDialogLayout.createSequentialGroup()
                        .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalBtn)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalMinusDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(salesDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sellBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelSaleBtn)
                        .addGap(37, 37, 37))
                    .addGroup(salesDialogLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(50, Short.MAX_VALUE))))
        );
        salesDialogLayout.setVerticalGroup(
            salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesDialogLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(salesDialogLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalBtn)))
                    .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(salesDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(totalMinusDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salesDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(salesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cancelSaleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sellBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))))
        );

        newStockDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        newStockDialog.setTitle("Add New Stock");
        newStockDialog.setAlwaysOnTop(true);
        newStockDialog.setMinimumSize(new java.awt.Dimension(600, 430));
        newStockDialog.setResizable(false);

        newStockTable.setBackground(new java.awt.Color(204, 255, 204));
        newStockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Packets", "New Expiry Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        newStockTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(newStockTable);
        newStockTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jButton4.setBackground(new java.awt.Color(51, 255, 0));
        jButton4.setText("Update");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 0, 0));
        jButton5.setText("Cancel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newStockDialogLayout = new javax.swing.GroupLayout(newStockDialog.getContentPane());
        newStockDialog.getContentPane().setLayout(newStockDialogLayout);
        newStockDialogLayout.setHorizontalGroup(
            newStockDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newStockDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(newStockDialogLayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newStockDialogLayout.setVerticalGroup(
            newStockDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newStockDialogLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(newStockDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 56, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bannax Pharmacy");
        setBackground(new java.awt.Color(0, 0, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        frameToolBar.setBackground(new java.awt.Color(204, 204, 204));
        frameToolBar.setRollover(true);
        frameToolBar.setPreferredSize(new java.awt.Dimension(960, 680));

        toolBarAddBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_obj.gif"))); // NOI18N
        toolBarAddBtn.setFocusable(false);
        toolBarAddBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarAddBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        frameToolBar.add(toolBarAddBtn);
        frameToolBar.add(jSeparator1);

        toolBarsearchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/searchButton.jpg"))); // NOI18N
        toolBarsearchBtn.setFocusable(false);
        toolBarsearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarsearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        frameToolBar.add(toolBarsearchBtn);
        frameToolBar.add(jSeparator2);

        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/prop_ps.gif"))); // NOI18N
        refreshBtn.setToolTipText("Show Drugs In Stock");
        refreshBtn.setFocusable(false);
        refreshBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        frameToolBar.add(refreshBtn);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "No. In Stock(packets)", "No. In Stock(cards)", "New Expiry Date", "Old Expiry Date", "Packet Price(₦)", "Card Price(₦)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        frameScrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        editControlsLabel.setBackground(new java.awt.Color(204, 204, 204));
        editControlsLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        editBtn2.setText("Edit Values Table");
        editBtn2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pin_view.gif"))); // NOI18N
        editBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtn2ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tabel Edit Controls");

        refreshBtn2.setText("Refresh Table");
        refreshBtn2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh_nav.gif"))); // NOI18N
        refreshBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtn2ActionPerformed(evt);
            }
        });

        AddBtn2.setText("Add New Entries");
        AddBtn2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_obj.gif"))); // NOI18N
        AddBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editControlsLabelLayout = new javax.swing.GroupLayout(editControlsLabel);
        editControlsLabel.setLayout(editControlsLabelLayout);
        editControlsLabelLayout.setHorizontalGroup(
            editControlsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(editControlsLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editControlsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editBtn2, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(AddBtn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshBtn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        editControlsLabelLayout.setVerticalGroup(
            editControlsLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editControlsLabelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBtn2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(AddBtn2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshBtn2)
                .addContainerGap())
        );

        notifyLabel.setBackground(new java.awt.Color(0, 0, 0));
        notifyLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        notifyLabel.setForeground(new java.awt.Color(0, 255, 255));
        notifyLabel.setText("Status Will be Displayed Here...");
        notifyLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        notifyLabel.setOpaque(true);

        searchField.setBackground(new java.awt.Color(204, 255, 255));
        searchField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchField.setToolTipText("Enter Name of Drug to Search");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        salesAddBtn.setText("Add to Sales List");
        salesAddBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/addtsk_tsk.gif"))); // NOI18N
        salesAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesAddBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        jLabel7.setText("Find:");

        newStockBtn.setText("New Stock");
        newStockBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/import_wiz.gif"))); // NOI18N
        newStockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newStockBtnActionPerformed(evt);
            }
        });

        summaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Amount(₦)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(summaryTable);

        jLabel8.setBackground(new java.awt.Color(153, 153, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Sales Summary");
        jLabel8.setOpaque(true);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Sales(s):");

        nOSLabel.setText("0");

        jLabel10.setText("Discount(s):");

        nODLabel.setText("0");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("Cash At Hand(₦):");

        cAH.setText("0");

        jPanel2.setBackground(new java.awt.Color(0, 0, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 255, 51), null, null));

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("New Expenditure");

        descField.setBackground(new java.awt.Color(255, 255, 51));

        amountField.setBackground(new java.awt.Color(255, 255, 51));
        amountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountFieldActionPerformed(evt);
            }
        });

        jLabel13.setForeground(new java.awt.Color(153, 255, 153));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Description");

        jLabel14.setForeground(new java.awt.Color(153, 255, 153));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Amount");

        jButton6.setBackground(new java.awt.Color(255, 153, 153));
        jButton6.setText("Make");
        jButton6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/step_current.gif"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(descField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        frameMenuBar.add(fileMenu);

        editMenu.setText("Edit");
        frameMenuBar.add(editMenu);

        setJMenuBar(frameMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(frameToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(frameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newStockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(salesAddBtn))
                                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(185, 185, 185)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nOSLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                                    .addComponent(nODLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cAH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editControlsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(115, 115, 115))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notifyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(frameToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(frameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(salesAddBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(newStockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(notifyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editControlsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nOSLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cAH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nODLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton2ActionPerformed
        // TODO add your handling code here:
        addItemDialog.dispose();
        clearItemDialog();
    }//GEN-LAST:event_cancelButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
       try{
         connection.close();
         System.exit(0);
         
     }
     catch(SQLException d){
         
         System.exit(1);
     }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void refreshBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtn2ActionPerformed
        refreshButtonActionPerformed(evt);
    }//GEN-LAST:event_refreshBtn2ActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        int count=0;
        try {
             String nAme = itemNameField.getText().toLowerCase();
             if(itemNameField.getText().equals("")){
                 throw new NumberFormatException();
             }
             count++;
             int mOnth = Integer.parseInt(expiryMonthField.getText());
             if(mOnth>12||mOnth<1){
                 throw new NumberFormatException();
             }
             count++;
             
             int yEar = Integer.parseInt(expiryYearField.getText());
             if(yEar>2050){
                 throw new NumberFormatException();
             }
             count++;
             int pAcketNumber = Integer.parseInt(packetNumberField.getText());
             if(pAcketNumber<1 || pAcketNumber>10000){
                 throw new NumberFormatException();
             }
             count++;
             int pAcketPrice = Integer.parseInt(packetPriceField.getText());
             if(pAcketPrice<1 || pAcketPrice>1000000){
                 throw new NumberFormatException();
             }
             count++;
             int cArdPerPacket = Integer.parseInt(cardPerPacketField.getText());
             if(cArdPerPacket<1 || cArdPerPacket>10000){
                 throw new NumberFormatException();
             }
             count++;
             int cArdPrice =Integer.parseInt(cardPriceField.getText());
             if(cArdPrice<1 || cArdPrice>10000){
                 throw new NumberFormatException();
             }
             count++;
             if(checkDate(convertToDate(mOnth,yEar))){
                 throw new NumberFormatException();
             }
             addItemDialog.dispose();
             //store validated variables to instance variables
             name = nAme;
             month = mOnth;
             year = yEar;
             stockNumber = pAcketNumber;
             price = pAcketPrice;
             
            //put the code to be performed after validation here
             insertDrug(name,pAcketNumber,cArdPerPacket,convertToDate(mOnth,yEar),null,pAcketPrice,cArdPrice);
             clearItemDialog();
             refreshButtonActionPerformed(evt);
        }
       catch(NumberFormatException j){
           switch(count){
                case(0):  addItemLabel.setText("Enter a Name");
                    break;
                case(1):  addItemLabel.setText("Enter a valid Month");
                    break;
                case(2):  addItemLabel.setText("Enter a valid year");
                    break;
                case(3): addItemLabel.setText("Enter a valid Packet Number");
                    break;
                case(4): addItemLabel.setText("Enter a valid Packet Price");
                    break;
                case(5): addItemLabel.setText("Enter a valid Card per Packet Number");
                    break;
                case(6): addItemLabel.setText("Enter a valid card Price");
                    break;
                case(7): addItemLabel.setText("Item has expired");
                    break;
           }
           
       }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        refreshButtonActionPerformed(evt);
        
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void editBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtn2ActionPerformed
        // TODO add your handling code here:
        passwordField.setText("");
        headerLabel.setText("Enter Password To Edit Table");
        loginDialog.setLocationRelativeTo(this);
        loginDialog.setVisible(true);
        
    }//GEN-LAST:event_editBtn2ActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        ResultSet rS;
        String str = String.format("SELECT DRUGNAME,PACKETNUMBER,CARDNUMBER,NEWEXPIRY,"
                    + "OLDEXPIRY,PACKETPRICE,"
                    + "CARDPRICE FROM DRUGS ORDER BY %s %s",getName(col),getA(a));
        try{
            PreparedStatement p = connection.prepareStatement(str,
                    ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            //p.setString(1, );
           // p.setString(2, getA(a));
            rS = p.executeQuery();
            refreshTable(rS);
        }
        catch(SQLException g){
            g.printStackTrace();
        }
        
        // upDateButton.setEnabled(true);
        // deleteButton.setEnabled(true);
         submitButton.setEnabled(false);
         rowMinusButton.setEnabled(false);
         rowPlusButton.setEnabled(false);
        
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void AddBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtn2ActionPerformed
        // TODO add your handling code hereDefaultTableModel:
        editLabel.setText("");
       table2.setModel(mdl2);
       submitButton.setEnabled(true);
       rowPlusButton.setEnabled(true);
        rowMinusButton.setEnabled(true);
        editTableDialog.setVisible(true);
        upDateButton.setEnabled(false);
        deleteButton.setEnabled(false);
       mdl2.setRowCount(0);
        //editableTable(mdl);
       
        
    }//GEN-LAST:event_AddBtn2ActionPerformed
           
    private void rowPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowPlusButtonActionPerformed
        // TODO add your handling code here:
        rows++;
        mdl2.addRow(new Object[6]);
        
    }//GEN-LAST:event_rowPlusButtonActionPerformed

    private void rowMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowMinusButtonActionPerformed
        // TODO add your handling code here:
        if(rows>=0){
        mdl2.removeRow(rows--);
        }
    }//GEN-LAST:event_rowMinusButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
      if(rows >= 0 ){
       if((mdl2.getValueAt(0, 0)) != null){
                try{
              newItemsTable(mdl2);
              editTableDialog.dispose();
              JOptionPane.showMessageDialog(this,"Items Added Successfully" );
              refreshButtonActionPerformed(evt);
             }
             catch(NumberFormatException y){
                 editLabel.setText("Enter Numbers Greater Than 0");
             }
             catch(IllegalArgumentException p){
                 editLabel.setText("Enter dates in 'YYYY-MM-DD' Format");
             }
             catch(NullPointerException q){
                 editLabel.setText("Fill All Cells");
             }
             catch (ParseException j){
                 editLabel.setText("Some Items are Expired");
             }
             catch (SQLException s){
                 JOptionPane.showMessageDialog(null, "Item(s) already exist in database");
             }
            }
            else{
                editLabel.setText("Enter a value");
            }
      }
      else{
          editLabel.setText("No Rows To Add");
      }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
        searchDatabase();
    }//GEN-LAST:event_searchFieldActionPerformed

    private void upDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upDateButtonActionPerformed
        // TODO add your handling code here:
        try{
        editWithTable();
        editTableDialog.dispose();
      //  updateNotification("edit Successful");
        }
        catch(ParseException pe){
                editLabel.setText("Items Are Expired");
                }
        catch(NumberFormatException nfe){
                editLabel.setText("Enter Numbers greater than 0");
                }
        catch(IllegalArgumentException iae){
                editLabel.setText(" Enter Date is 'YYYY-MM-DD' Format");
                }
        catch(NullPointerException npe){
                editLabel.setText("Fill All Cells");
                }
        refreshButtonActionPerformed(evt);
    }//GEN-LAST:event_upDateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        warningDialog.setLocationRelativeTo(editTableDialog);
        warningDialog.setVisible(true);
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        warningDialog.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        deleteSelected();
        refreshButtonActionPerformed(evt);
        warningDialog.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void salesAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesAddBtnActionPerformed
        // TODO add your handling code here:
        
        if(!salesDialog.isVisible()){
        salesDialog.setLocation(771, 61);
        
        salesDialog.setVisible(true);
           
        }
        addToSales();
        
       
    }//GEN-LAST:event_salesAddBtnActionPerformed

    private void cancelSaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSaleBtnActionPerformed
        // TODO add your handling code here:
        salesDialog.dispose();
        clearSalesDialog();
    }//GEN-LAST:event_cancelSaleBtnActionPerformed

    private void totalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalBtnActionPerformed
        // TODO add your handling code here:
        try{
            total();
        }
        catch(ArrayStoreException ase){
            JOptionPane.showMessageDialog(salesDialog, "Discount too High");
        }
        catch(ParseException pe){
            JOptionPane.showMessageDialog(salesDialog, "Card Number and Packet Number cannot be 0");
        }
        catch(IllegalArgumentException iae){
            JOptionPane.showMessageDialog(salesDialog, "Discount is not a number");
            
        }
        catch(ArithmeticException ae){
            JOptionPane.showMessageDialog(salesDialog, mdl3.getValueAt(sellCheck, 0)+" in Stock is less than amount you want to sell");
        }
    }//GEN-LAST:event_totalBtnActionPerformed

    private void sellBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellBtnActionPerformed
        // TODO add your handling code here:
        sell = true;
        totalBtnActionPerformed(evt);
        sell = false;
        refreshButtonActionPerformed(evt);
    }//GEN-LAST:event_sellBtnActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        String s;
        try{
            PreparedStatement p = connection.prepareStatement("SELECT * FROM PASSWORD");
            ResultSet r = p.executeQuery();
            r.next();
            s = r.getString(1);
            if(passwordField.getText().equals(s)){
            editTable(model);
         upDateButton.setEnabled(true);
         deleteButton.setEnabled(true);
         submitButton.setEnabled(false);
         rowPlusButton.setEnabled(false);
         rowMinusButton.setEnabled(false);
         editTableDialog.setLocationRelativeTo(this);
        editTableDialog.setVisible(true);
        loginDialog.dispose();
        }
        else{
            headerLabel.setText("Incorrect Password");
            passwordField.setText("");
        }
        }
        catch(SQLException sql){
            sql.printStackTrace();
        }
        
    }//GEN-LAST:event_loginButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
        loginButtonActionPerformed(evt);
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        loginDialog.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void discountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountFieldActionPerformed
        // TODO add your handling code here:
        totalBtnActionPerformed(evt);
    }//GEN-LAST:event_discountFieldActionPerformed

    private void newStockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newStockBtnActionPerformed
        // TODO add your handling code here:
        AddToNewStock();
        if(!newStockDialog.isVisible()){
            newStockDialog.setLocation(770, 300);
        newStockDialog.setVisible(true);
        }
    }//GEN-LAST:event_newStockBtnActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        newStockDialog.setVisible(false);
        mdl4.setRowCount(0);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
        updateNewStock();
        refreshButtonActionPerformed(evt);
        }
        catch(NullPointerException npe){
            JOptionPane.showMessageDialog(newStockDialog, "Fill All Cells");
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(newStockDialog, "New Stock Must Be Greater Than Zero");
        }
        catch(IllegalArgumentException iae){
            JOptionPane.showMessageDialog(newStockDialog, "Date Must Be in 'YYYY-MM-DD' Format");
        }
        catch(ParseException cce){
            JOptionPane.showMessageDialog(newStockDialog, "Item(s) Expired");
        }
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int amt;
        try{
            if(descField.getText().equals("") || amountField.getText().equals("")){
                throw new NullPointerException();
            }
            amt = Integer.parseInt(amountField.getText());
            updateSummary(descField.getText(), amt);
                  descField.setText("");
                  amountField.setText("");
                          refreshButtonActionPerformed(evt);
        }
        catch(NullPointerException npe){
            JOptionPane.showMessageDialog(jPanel2, "Field(s) Cannot Be Empty");
        }
        catch(IllegalArgumentException iae){
            JOptionPane.showMessageDialog(jPanel2, "Enter a number in Amount Field");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void amountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountFieldActionPerformed
        // TODO add your handling code here:
        jButton6ActionPerformed(evt);
    }//GEN-LAST:event_amountFieldActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BannaxFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn2;
    private javax.swing.JButton addButton;
    private javax.swing.JDialog addItemDialog;
    private javax.swing.JLabel addItemLabel;
    private javax.swing.JTextField amountField;
    private javax.swing.JLabel cAH;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelButton2;
    private javax.swing.JButton cancelSaleBtn;
    private javax.swing.JTextField cardPerPacketField;
    private javax.swing.JTextField cardPriceField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField descField;
    private javax.swing.JTextField discountField;
    private javax.swing.JButton editBtn2;
    private javax.swing.JPanel editControlsLabel;
    private javax.swing.JLabel editLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JDialog editTableDialog;
    private javax.swing.JTextField expiryMonthField;
    private javax.swing.JLabel expiryMonthLabel;
    private javax.swing.JTextField expiryYearField;
    private javax.swing.JLabel expiryYearLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar frameMenuBar;
    private javax.swing.JScrollPane frameScrollPane;
    private javax.swing.JScrollPane frameScrollPane1;
    private javax.swing.JScrollPane frameScrollPane2;
    private javax.swing.JToolBar frameToolBar;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JButton loginButton;
    private javax.swing.JDialog loginDialog;
    private javax.swing.JLabel nODLabel;
    private javax.swing.JLabel nOSLabel;
    private javax.swing.JButton newStockBtn;
    private javax.swing.JDialog newStockDialog;
    private javax.swing.JTable newStockTable;
    private javax.swing.JLabel notifyLabel;
    private javax.swing.JTextField packetNumberField;
    private javax.swing.JTextField packetPriceField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton refreshBtn2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton rowMinusButton;
    private javax.swing.JButton rowPlusButton;
    private javax.swing.JButton salesAddBtn;
    private javax.swing.JDialog salesDialog;
    private javax.swing.JTable salesTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton sellBtn;
    private javax.swing.JLabel stockNumberLabel;
    private javax.swing.JLabel stockNumberLabel1;
    private javax.swing.JButton submitButton;
    private javax.swing.JTable summaryTable;
    private javax.swing.JTable table;
    private javax.swing.JTable table2;
    private javax.swing.JTable table3;
    private javax.swing.JDialog tableModelDialog;
    private javax.swing.JButton toolBarAddBtn;
    private javax.swing.JButton toolBarsearchBtn;
    private javax.swing.JButton totalBtn;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalMinusDiscount;
    private javax.swing.JButton upDateButton;
    private javax.swing.JDialog warningDialog;
    // End of variables declaration//GEN-END:variables
    private Connection connection; 
    private PreparedStatement pStatement;
    private ResultSet resultSet;
    private ResultSetMetaData resultSetMetaData;
    private int numberOfRows;
    private boolean connected =false;
    private ArrayList<Drug> drugList;
    private DefaultTableModel mdl ;
    private int rows=-1;
    private DefaultTableModel model;
    DefaultTableModel mdl2;
    DefaultTableModel mdl3;
    DefaultTableModel mdl4;
    DefaultTableModel mdl5;
    private Calendar c;
    private boolean sell = false;
    private int sellCheck;
    private JTableHeader header;
    private int col = 0;
    private int a = 0;
    private int f =0;
    ActionEvent g;
    private boolean toggle =true;
    private Date d;
    
    
    //variables for Insert values
    private String name;
    private int month;
    private int year;
    private int stockNumber;
    private int price;
    
    
    
    public void initEvents(){
        searchField.getDocument().addDocumentListener(new DocumentListener(){
            public void changedUpdate(DocumentEvent e) {
    searchDatabase();
    
  }
  public void removeUpdate(DocumentEvent e) {
   searchDatabase();
  }
  public void insertUpdate(DocumentEvent e) {
    searchDatabase();
    
  }
  

        }
        
        
        
        );
        addItemDialog.setLocationRelativeTo(this);
        toolBarAddBtn.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent event){
                    
                 addItemDialog.setVisible(true);
                }
       
        }
        );
        addWindowListener(new WindowAdapter() {
   public void windowClosing(WindowEvent evt) {
     
     try{
         connection.close();
         System.exit(0);
         //System.out.println("Bye Bye");
     }
     catch(SQLException d){
         
         System.exit(0);
     }
   }
  });

        model = (DefaultTableModel) table.getModel();
        mdl3 = (DefaultTableModel) salesTable.getModel();
        mdl4 = (DefaultTableModel) newStockTable.getModel();
        mdl5 = (DefaultTableModel) summaryTable.getModel();
        
        addItemDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//disposes the additem dialog on close
        c = Calendar.getInstance();
        
        header = new JTableHeader();
        header = table.getTableHeader();
        header.setReorderingAllowed(false);
        
        header.addMouseListener(new MouseAdapter() {  
            public void mouseClicked(MouseEvent e) {  
                
                col = header.columnAtPoint(e.getPoint());  
                
                if(f==col){
                   
                if(toggle){
                    a=1;
                 toggle = false;   
                }  
                else{
                    a=0;
                    toggle = true;
                }
                    
                }
                else{
                    a=0;
                }
                f = col;
               refreshButtonActionPerformed(g);
           }  
        });
        
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    //displays text to th status Area below
    public void updateNotification(String tex){
        notifyLabel.setText(tex);
      
    }
    //Clears AddItemDialog TextField Contents
     public void clearItemDialog(){
         itemNameField.setText("");
         expiryMonthField.setText("");
         expiryYearField.setText("");
         packetNumberField.setText("");
         packetPriceField.setText("");
         cardPerPacketField.setText("");
         cardPriceField.setText("");
     }

   public void nimbusLook(){
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BannaxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BannaxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BannaxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BannaxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
   }
   public void insertDrug(String n,int st, int st2, Date d1, Date d2, int p1, int p2){
      try{
          pStatement = connection.prepareStatement("INSERT INTO DRUGS VALUES (?,?,?,?,?,?,?,?)");
          pStatement.setString(1, n);
          pStatement.setInt(2, st);
          pStatement.setInt(3, st*st2);
          pStatement.setDate(4, d1);
          pStatement.setDate(5, d2);
          pStatement.setInt(6, p1);
          pStatement.setInt(7, p2);
          pStatement.setInt(8, st2);
         // resultSet = statement.executeQuery("INSERT INTO DRUGS VALUES (name,stockNumber,stockNumber,convertToDate(month,year),convertToDate(month,year),price,price)");
          pStatement.executeUpdate();
          updateNotification("Insert Operation successful");
      }
      catch(SQLException s){
          updateNotification("Insert operation Failed!");
      }
   }
   public Date convertToDate(int m,int y){
       Date date = new Date(y-1900,m-1,1);
       return date;
   }
   public void refreshTable(ResultSet h){
       
       //clear table
       model.setRowCount(0);
       Object rowData[] = new Object[7];
       ArrayList<Drug> drugList = ist(h);
       for(int i=0;i<drugList.size();i++){
       rowData[0] = drugList.get(i).name;
       rowData[1] = drugList.get(i).packNo;
       rowData[2] = drugList.get(i).cardNo;
       rowData[3] = drugList.get(i).newExpiry;
       rowData[4] = drugList.get(i).oldExpiry;
       rowData[5] = drugList.get(i).packPrice;
       rowData[6] = drugList.get(i).cardPrice;
      //update new row
       model.addRow(rowData);
      
       }
       editTable(model);
       refreshSummary();
   }
 public ArrayList ist(ResultSet d){
     ArrayList<Drug> list = new ArrayList<Drug>();
     int count = 0;
   try{
       
       //resultSetMetaData = d.getMetaData();
       
       //count number of rows in resultSet to know how to update table
       while(d.next()){
       list.add(new Drug(d.getString(1),d.getInt(2),d.getInt(3),d.getDate(4),d.getDate(5),d.getInt(6),d.getInt(7)));
       
       }
      
   }
   catch(SQLException s){
       s.printStackTrace();
   }
   return list;
 }
    public void editTable(DefaultTableModel j){
        
        int c =j.getColumnCount();
        int r = j.getRowCount();
        Object[] data = new Object[c-2];
        mdl.setRowCount(0);
        table2.setModel(mdl);
        
        for(int i=0;i<r;i++){
           int count=0;
    
           for( int k = 0; k<c; k++){
                
                if(k == 3){
                    k=5;
                }
                data[count++] = j.getValueAt(i,k);
                
            }
       
            mdl.addRow(data);
            
        }
        
    }
     private void editWithTable()throws ParseException,NumberFormatException,IllegalArgumentException,NullPointerException{
         int co=0;
                  try{
                      
                PreparedStatement prs = connection.prepareStatement("UPDATE DRUGS "
                        + "SET PACKETNUMBER = (?),CARDNUMBER = (?),"
                        + "PACKETPRICE = (?),CARDPRICE = (?)"
                        + "WHERE DRUGNAME = (?)");
                
                String s2;
                int i1;
                int i2;
                int i3;
                int i4;
                
                for(int i=0;i<mdl.getRowCount();i++){
                    
                    i1 = (int)mdl.getValueAt(i, 1);
                    i2 = (int)mdl.getValueAt(i, 2);
                    i3 = (int)mdl.getValueAt(i, 3);
                    i4 = (int)mdl.getValueAt(i, 4);
                    
                   
                    
                    if((i1<1)||(i2<1)||(i3<1)||(i4 <1)){
                        throw new NumberFormatException();
                    }
                    
                }
                
                for(int i=0;i<mdl.getRowCount();i++){
                    
                    
                    //s = (String)mdl.getValueAt(i, 0);
                    s2 = (String)mdl.getValueAt(i, 0);
                    i1 = (int)mdl.getValueAt(i, 1);
                    i2 = (int)mdl.getValueAt(i, 2);
                  //  d1 = Date.valueOf((String)mdl.getValueAt(i, 3));
                  //  d2 = Date.valueOf((String)mdl.getValueAt(i, 4));
                    i3 = (int)mdl.getValueAt(i, 3);
                    i4 = (int)mdl.getValueAt(i, 4);
                     System.out.println(++co);
                        
                        prs.setInt(1, i1);
                        prs.setInt(2, i2);
                       // prs.setDate(3, d1);
                       // prs.setDate(4, d2);
                        prs.setInt(3, i3);
                        prs.setInt(4, i4);
                        prs.setString(5, s2);
                      System.out.println(++co);  
                    prs.addBatch();
                    System.out.println("batch ok");
                }
                prs.executeBatch();
                System.out.println("exe ok");
            }
            catch(SQLException o){
                updateNotification("failed To update");
                o.printStackTrace();
            }
            catch(NullPointerException g){
                throw new NullPointerException();
            }
     }

     private void newItemsTable(DefaultTableModel md) throws NumberFormatException,IllegalArgumentException,NullPointerException,ParseException,SQLException{
              try{
                PreparedStatement prs = connection.prepareStatement("INSERT INTO DRUGS VALUES (?,?,?,?,?,?,?,?)");
                String s;
                int i1;
                int i2;
                Date d1;
                Date d2 = null;
                int i3;
                int i4;
                
                for(int i=0;i<md.getRowCount();i++){
                    
                    i1 = (int)md.getValueAt(i, 1);
                    i2 = (int)md.getValueAt(i, 2);
                    i3 = (int)md.getValueAt(i, 4);
                    i4 = (int)md.getValueAt(i, 5);
                    
                    try{
                        d1 = Date.valueOf((String)md.getValueAt(i, 3));
                    } 
                    catch(IllegalArgumentException u){
                    throw new IllegalArgumentException();    
                    }
                    
                    if((i1<1)||(i2<1)||(i3<1)||(i4 <1)){
                        throw new NumberFormatException();
                    }
                    if(checkDate(d1)){
                        throw new ParseException("",1);
                    }
                }
                for(int i=0;i<md.getRowCount();i++){
                    
                    
                    s = (String)md.getValueAt(i, 0);
                    i1 = (int)md.getValueAt(i, 1);
                    i2 = (int)md.getValueAt(i, 2);
                    d1 = Date.valueOf((String)md.getValueAt(i, 3));
                    i3 = (int)md.getValueAt(i, 4);
                    i4 = (int)md.getValueAt(i, 5);
                     
                    
                        prs.setString(1, s.toLowerCase());
                        prs.setInt(2, i1);
                        prs.setInt(3, i2*i1);
                        prs.setDate(4, d1);
                        prs.setDate(5, d2);
                        prs.setInt(6, i3);
                        prs.setInt(7, i4);
                        prs.setInt(8, i2);
                    prs.addBatch();
                    
                }
                prs.executeBatch();
                
            }
            catch(SQLException o){
                throw new SQLException();
                
                
            }
            catch(NullPointerException g){
                throw new NullPointerException();
            }
        
            
            
            
        }
     private void searchDatabase(){
          PreparedStatement ps;
        ResultSet s;
       try{
        ps = connection.prepareStatement("SELECT DRUGNAME,PACKETNUMBER,CARDNUMBER,NEWEXPIRY,OLDEXPIRY,PACKETPRICE,CARDPRICE FROM DRUGS WHERE DRUGNAME LIKE ? ");
        String h = searchField.getText().toLowerCase();
        ps.setString(1, "%" +h+"%");
        s =ps.executeQuery();
        refreshTable(s);
       }
       catch(SQLException y){
           updateNotification("Search operation failed");
       }
     }
     private boolean checkDate(Date d){
         Calendar c = Calendar.getInstance();
         Date e = new Date(c.get(Calendar.YEAR)-1900,c.get(Calendar.MONTH),c.get(Calendar.DATE));
         if(d.before(e)){
             return true;
         }
         else{
             return false;
         }
     }
     private void deleteSelected(){
        
        try {
            PreparedStatement pse = connection.prepareStatement("DELETE FROM DRUGS WHERE DRUGNAME = (?)");
          //  int f = table2.getSelectedRow();
            int[] r = table2.getSelectedRows();
           for(int p = 0; p<r.length;p++){
            pse.setString(1, (String)mdl.getValueAt(r[p],0));
            pse.addBatch();
           }
           pse.executeBatch();
        }
        catch(SQLException sql){
            
        }
    }
    
    private void addToSales(){
        int[] items = table.getSelectedRows();
        Object[] ob = new Object[4];
        ob[1]=0;
        ob[2]=0;
        boolean repeated = false;
        for(int i=0;i<items.length;i++){
            ob[0] = model.getValueAt(items[i], 0);
            for(int y = 0; y<mdl3.getRowCount();y++){
                if((String)model.getValueAt(items[i], 0) == (String)mdl3.getValueAt(y, 0)){
                    repeated = true;
                }
            }
            if(repeated == false){
            mdl3.addRow(ob);
            }
        }
    }
    private void total() throws NullPointerException,ArrayStoreException,IllegalArgumentException,ParseException,ArithmeticException{
        ResultSet rs;
        int f = mdl3.getRowCount();
        int[][] no= new int[f][2];
        int [][] prices = new int [f][2];
        int [] cardPerPacket = new int[f];
        int[] cardNumber = new int[f];
        int counter;
        int discount=0;
        int sum = 0;
        if(f>0){
            for(int c = 0;c<f;c++ ){
                counter = 0;
                for(int co = 1;co < 3;co++){
                    try{
                        no[c][counter++] =(int)mdl3.getValueAt(c, co);
                    }
                    catch(NullPointerException g){
                        //throw new NullPointerException();
                       JOptionPane.showMessageDialog(salesDialog, "null Pointer error");
                    }
                    
                }
                if(no[c][0] == 0 && no[c][1] == 0){
                     throw new ParseException("",1);   
                    }
                if(discountField.getText().equals("")){
                    discount =0;
                }
                else{
                    try{
                     discount = Integer.parseInt(discountField.getText());
                    } 
                    catch(IllegalArgumentException pe){
                        
                       throw new IllegalArgumentException();
                    }
                }
            }
            for(int s=0;s<f;s++){
                try{
                    PreparedStatement pst = connection.prepareStatement("SELECT PACKETPRICE, CARDPRICE, CARDPERPACKET,"
                            + "CARDNUMBER FROM DRUGS"
                            + " WHERE DRUGNAME = (?)");
                    pst.setString(1, (String)mdl3.getValueAt(s, 0));
                    rs = pst.executeQuery();
                    rs.next();
                    prices[s][0] = rs.getInt(1);
                    prices[s][1] = rs.getInt(2);
                    cardPerPacket[s] = rs.getInt(3);
                    cardNumber[s] = rs.getInt(4);
                     }
                catch(SQLException sql){
                  JOptionPane.showMessageDialog(salesDialog, "An Error Occurred");
                   // sql.printStackTrace();
                    }
           }
            for(int s=0;s<f;s++){
            if(((no[s][0]*cardPerPacket[s])+no[s][1])>cardNumber[s]){
                sellCheck = s;
                throw new ArithmeticException();
                
                }
            }
            
            int[] tPrice = new int[f];
            for(int s = 0;s<f;s++){
                tPrice[s] = prices[s][0]*no[s][0] + prices[s][1]*no[s][1];
            }
        sum =0;
        for(int s = 0;s<f;s++){
            mdl3.setValueAt(tPrice[s], s, 3);
            sum = sum + tPrice[s];
            }
        if(discount>= sum){
           
            throw new ArrayStoreException();
                    
        }
        totalLabel.setText(String.format("%,.2f", (float)sum));
        totalMinusDiscount.setText(String.format("%,.2f", (float)sum-discount));
        
        if(sell){
           
            if(JOptionPane.showConfirmDialog(salesDialog, "Are You Sure You want to Sell Item(s)")==0){
                int remainingCards;
                int remainingPacks;
                
                try{
                    PreparedStatement pps = connection.prepareStatement("UPDATE DRUGS "
                        + "SET CARDNUMBER =(?),PACKETNUMBER =(?) WHERE DRUGNAME = (?)");
                    for(int s=0; s < f;s++){
                        
                        remainingCards = cardNumber[s]-((cardPerPacket[s]*no[s][0])+ no[s][1]);
                        remainingPacks = remainingCards/cardPerPacket[s];
                        pps.setInt(1, remainingCards);
                        pps.setInt(2, remainingPacks);
                        pps.setString(3, (String)mdl3.getValueAt(s, 0));
                        pps.addBatch();
                    }
                    
                    pps.executeBatch();
                    
                    updateSummary("Sale", sum);
                    
                    if(discount != 0){
                      updateSummary("Discount", discount);  
                    }
                    JOptionPane.showMessageDialog(salesDialog, "Sale Successful");
                    salesDialog.dispose();
                    clearSalesDialog();
                    
                }
                    catch(SQLException sqle){
                        sqle.printStackTrace();
                    }
           }
         }
        }
    }
    private void clearSalesDialog(){
        mdl3.setRowCount(0);
        discountField.setText("");
        totalLabel.setText("0.00");
        totalMinusDiscount.setText("0.00");
        
    }
    
    private String getName(int s){
        String[] name = {"DRUGNAME","PACKETNUMBER","CARDNUMBER","NEWEXPIRY","OLDEXPIRY","PACKETPRICE","CARDPRICE"};
        return name[s];
    }
    private String getA(int s){
        String[] a = {"ASC","DESC"};
        return a[s];
    }
    
    private void AddToNewStock(){
        int f = table.getSelectedRows().length;
        Object[] obj = new Object[3];
        if(f>0){
        int[] sRows = table.getSelectedRows();
        for(int s=0; s<f; s++){
            obj[0] = model.getValueAt(sRows[s], 0);
            obj[1] = null;
            obj[2] = null;
            mdl4.addRow(obj);
        }
        }
    }
    
    private void updateNewStock() throws ParseException,NullPointerException,IllegalArgumentException,NumberFormatException{
        int f = mdl4.getRowCount();
        int[] newPack = new int[f];
        Date[] newDate = new Date[f];
        String[] nAme = new String[f];
        if(f>0){
            for(int s =0; s<f ; s++){
                if(mdl4.getValueAt(s, 1).equals("")||mdl4.getValueAt(s, 2).equals("")){
                    throw new NullPointerException();
                }
                
                Date date = Date.valueOf((String)mdl4.getValueAt(s, 2));
                
                if((int)mdl4.getValueAt(s, 1)<1){
                    throw new NumberFormatException();
                   
                }
                if(date.before(d)){
                  throw new ParseException("",1);
                }
                newPack[s] = (int)mdl4.getValueAt(s, 1);
                newDate[s] = date;
                nAme[s] = (String)mdl4.getValueAt(s, 0);
            }
        int[] cardPerPack = new int[f];
        int[] cards = new int[f];
        Date[] dDate = new Date[f];
        ResultSet rs;
            for(int s =0; s<f; s++){
                try{
                    PreparedStatement ps = connection.prepareStatement("SELECT CARDNUMBER,NEWEXPIRY,CARDPERPACKET FROM "
                    + "DRUGS WHERE DRUGNAME = ?");
                    ps.setString(1, nAme[s]);
                    rs = ps.executeQuery();
                    rs.next();
                    cards[s] = rs.getInt(1);
                    dDate[s] = rs.getDate(2);
                    cardPerPack[s] = rs.getInt(3);
                }
                catch(SQLException sql){
                    JOptionPane.showMessageDialog(newStockDialog, "A Fatal Error Occured");
                }
            }
         
             try{
                 PreparedStatement ps = connection.prepareStatement("UPDATE DRUGS SET CARDNUMBER = ?, "
                         + "PACKETNUMBER = ?, NEWEXPIRY = ?, OLDEXPIRY = ? WHERE DRUGNAME = ?");
                 for(int s =0; s<f; s++){
                 
                 int sum = cards[s] + newPack[s]*cardPerPack[s];
                 int pack = sum/cardPerPack[s];
                 ps.setInt(1, sum);
                 ps.setInt(2, pack);
                 ps.setDate(3, newDate[s]);
                 ps.setDate(4, dDate[s]);
                 ps.setString(5, nAme[s]);
                 ps.addBatch();
                 }
                 ps.executeBatch();
                 newStockDialog.dispose();
                 mdl4.setRowCount(0);
             }
             catch(SQLException sql){
                 sql.printStackTrace();
             }
         
          //  salesDialog.setM
            
            
        }
    }
    private void refreshSummary(){
        mdl5.setRowCount(0);
        int sales = 0;
        int disc = 0;
        int sum = 0;
        Object[] ob = new Object[2];
        try{
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery("SELECT DESCRIPTION, AMOUNT FROM SUMMARY");
            while(rs.next()){
           ob[0] =  rs.getString(1);
           ob[1] =  rs.getInt(2);
           mdl5.addRow(ob);
           if(ob[0].equals("Sale")){
               sales++;
               sum = sum + (int)ob[1];
           }
           else if(ob[0].equals("Discount")){
               disc++;
               sum = sum - (int)ob[1];
           }
           else{
               sum = sum - (int)ob[1];
           }
            }
            nOSLabel.setText(""+sales);
            nODLabel.setText(""+disc);
            String str = String.format("%,.2f", (float)sum);
            cAH.setText(str);
        }
        catch(SQLException sql){
            sql.printStackTrace();
        }
    }
    
    private void updateSummary(String description, int amount){
       try{
        PreparedStatement ppst = connection.prepareStatement("INSERT INTO SUMMARY VALUES (?,?,?)");
        ppst.setString(1, description);
        ppst.setInt(2, amount);
        ppst.setTime(3, null);
       ppst.executeUpdate();
       }
       catch(SQLException sql){
           sql.printStackTrace();
       }
    }
    
    
 private class Drug{
     String name;
     int packNo;
     int cardNo;
     Date newExpiry;
     Date oldExpiry;
     int packPrice;
     int cardPrice;
     
     public Drug(String name,int packNo,int cardNo,Date newExpiry,Date oldExpiry,int packPrice,int cardPrice){
         this.name = name;
         this.packNo = packNo;
         this.cardNo = cardNo;
         this.newExpiry = newExpiry;
         this.oldExpiry = oldExpiry;
         this.packPrice = packPrice;
         this.cardPrice = cardPrice;
     }
     
  
 }
}
